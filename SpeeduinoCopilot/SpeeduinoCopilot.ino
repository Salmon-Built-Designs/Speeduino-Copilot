
//////////////////////////////////////
// Speeduino Copilot
// Mike Scott
// December 2020
// intended as a separate data logging device to allow MGVLG format files
// to be generated by teensy 3.5 Serial1 connected to the Secondary Serial of 
// a Speeduino. 
// This might be useful to have the SD card remote from the main ECU (for example
// in a motorcylce where the ECU is tucked behind difficult-to-access fairing panels)
// The teensy can be on a separate board, connected over serial and placed in a more
// accessible area.

#include "mgvlg.h"
#include "speeduino.h"


void errorHalt(const char* msg) {
  Serial.print("Error: ");
  Serial.println(msg);
  while (true) {}
}

void setup()
{
  delay(1000);
  Serial.begin(115200);
  Serial1.begin(115200);
  Serial.println("Initialising");
  delay(1000);

  // Initialise the SD and write MGVLG headers ready for data
  mgvlgInit();
 
}


void loop() {
  Serial.println("Starting");

  // structure for data recieved from Speeduino
  speeduinoDataPacket dataRecieved;

  Serial.println("Starting - send \"A\"");
  Serial1.setTimeout(2000);
  // Wait for serial to be available
  while(Serial1.availableForWrite()==0) {}
  Serial1.write("A");

  Serial.println("Waiting for \"A\"");
  // We expect to see a confirmation of an "A" back from Speeduino
  if (Serial1.find("A")) {
    Serial.println("Recieved \"A\"");
    if (Serial1.available() > 0) {
        // read the incoming byte:
        Serial1.readBytes((byte *)&dataRecieved,PACKETLENGTH);
        Serial.print("currentStatus.sec1: ");
        Serial.println(dataRecieved.secl);

        // write a data record to the logfile
        writeRecord(&dataRecieved);
     }
   }
}
